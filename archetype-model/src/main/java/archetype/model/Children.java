package archetype.model;

// Generated Apr 28, 2010 6:07:31 PM by Hibernate Tools 3.3.0.GA

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OrderColumn;
import javax.persistence.Table;
import javax.persistence.TableGenerator;
//import javax.persistence.TableGenerator;
import javax.persistence.Transient;
import javax.persistence.Version;

import org.apache.log4j.Logger;
//eclipselink
//import org.eclipse.persistence.annotations.Cache;
//import org.eclipse.persistence.annotations.CacheType;
import org.jibx.runtime.IUnmarshallingContext;

/**
 * Children generated by hbm2java
 */
@Entity
@Table(name = "children")
//@DiscriminatorColumn(name = "class", discriminatorType = DiscriminatorType.INTEGER)
//@DiscriminatorValue("123456790")

// eclipselink
// @Cache(type = CacheType.FULL)

// hibernate
// @Inheritance(strategy = InheritanceType.JOINED)

public class Children implements java.io.Serializable {

	private static Logger		logger				= Logger.getLogger(Children.class);
	
	private static final long	serialVersionUID	= 4223121569796285983L;

	private Audit				audit;
	private List<Father>		fathers				= new ArrayList<Father>(0);
	private Integer				id;
	private String				name;
	private Integer				version;

	public Children() {

	}

	public Children(Integer id) {
		this.id = id;
	}

	public Children(Integer id, String name) {
		this.id = id;
		this.name = name;
	}

	public Children(String name) {
		this.name = name;
	}

	public Children(String name, List<Father> fathers, Set<Father> grandFathers) {
		this.name = name;
		this.fathers = fathers;
	}

	@Embedded
	@AttributeOverrides({@AttributeOverride(name = "created", column = @Column(name = "created")),
			@AttributeOverride(name = "modified", column = @Column(name = "modified")) })
	public Audit getAudit() {
		return audit;
	}

	@ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.DETACH)
	@OrderColumn(name = "seq", insertable = true, nullable = false, updatable = true)
	@JoinTable(name = "father_children", joinColumns = {@JoinColumn(name = "id_children", nullable = false, updatable = false) }, inverseJoinColumns = {@JoinColumn(name = "id_father", nullable = false, updatable = false) })
	public List<Father> getFathers() {
		return this.fathers;
	}

	@Id
	@Column(name = "id", unique = true, nullable = false)
	//@GeneratedValue(strategy = GenerationType.IDENTITY)
	//ECLIPSELINK
	@GeneratedValue(generator = "children", strategy = GenerationType.TABLE)
	@TableGenerator(name = "children", table = "keygen", pkColumnName = "table_name", valueColumnName = "last_used_id", initialValue = 0, allocationSize = 1)
	
	//HIBERNATE
	//@GeneratedValue(generator = "children")
	//@GenericGenerator(name = "children", strategy = "archetype.utils.orm.hibernate.id.IdentityGenerator")
	public Integer getId() {
		return this.id;
	}

	@Column(name = "name", nullable = false, length = 65535)
	public String getName() {
		return this.name;
	}

	@Version
	@Column(name = "version", nullable = false)
	public Integer getVersion() {
		return version;
	}

	@Transient
	public void postset(IUnmarshallingContext ctx) {
		logger.trace("postset!");
	}

	@Transient
	public void postset(Object obj) {
		logger.trace("postset!");
	}

	@Transient
	public void preget(Object obj) {
		logger.trace("preget!");
	}

	@Transient
	public void preset(Object obj) {
		logger.trace("preset!");
	}

	public void setAudit(Audit audit) {
		this.audit = audit;
	}

	public void setFathers(List<Father> fathers) {
		this.fathers = fathers;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Transient
	public void setmethod(Object obj) {
		logger.trace("setmethod!");
	}

	public void setName(String name) {
		this.name = name;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}
}
