package archetype.model;

// Generated Apr 28, 2010 6:07:31 PM by Hibernate Tools 3.3.0.GA

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.OrderColumn;
import javax.persistence.Table;
import javax.persistence.TableGenerator;
//import javax.persistence.TableGenerator;
import javax.persistence.Transient;
import javax.persistence.Version;

import org.apache.log4j.Logger;
// eclipselink
// import org.eclipse.persistence.annotations.Cache;
// import org.eclipse.persistence.annotations.CacheType;
import org.jibx.runtime.IUnmarshallingContext;

/**
 * Father generated by hbm2java
 */
@Entity
@Table(name = "father")
//@DiscriminatorColumn(name = "class", discriminatorType = DiscriminatorType.INTEGER)
//@DiscriminatorValue("123456789")

// eclipselink
// @Cache(type = CacheType.FULL)

// hibernate
// @Inheritance(strategy = InheritanceType.JOINED)

public class Father implements AbstractEntity, Serializable, Cloneable {

	private static Logger		logger				= Logger.getLogger(Father.class);

	private static final long	serialVersionUID	= -59151971976934190L;

	private Audit				audit;
	private Children			children;
	private List<Children>		childrens			= new ArrayList<Children>(0);
	private Father				father;
	private Set<Father>			fathers				= new HashSet<Father>(0);
	private Integer				id;
	private boolean				mother;
	private String				name;
	private Integer				version;

	public Father() {

	}

	public Father(Father father, Children children, String name, boolean mother, List<Children> childrens, Set<Father> fathers) {
		this.father = father;
		this.children = children;
		this.name = name;
		this.mother = mother;
		this.childrens = childrens;
		this.fathers = fathers;
	}

	public Father(Integer id) {
		this.id = id;
	}

	public Father(String name, boolean mother) {
		this.name = name;
		this.mother = mother;
	}

	@Embedded
	@AttributeOverrides({@AttributeOverride(name = "created", column = @Column(name = "created")),
			@AttributeOverride(name = "modified", column = @Column(name = "modified")) })
	public Audit getAudit() {
		return this.audit;
	}

	@OneToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinColumn(name = "id_children")
	public Children getChildren() {
		return this.children;
	}

	@OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@OrderColumn(name = "seq", insertable = true, nullable = false, updatable = true)
	@JoinTable(name = "father_children", joinColumns = {@JoinColumn(name = "id_father", nullable = false, updatable = false) }, inverseJoinColumns = {@JoinColumn(name = "id_children", nullable = false, updatable = false) })
	public List<Children> getChildrens() {
		return this.childrens;
	}

	@ManyToOne(fetch = FetchType.LAZY, cascade = {CascadeType.DETACH, CascadeType.PERSIST, CascadeType.MERGE})
	@JoinColumn(name = "id_father")
	public Father getFather() {
		return this.father;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "father", cascade = CascadeType.DETACH)
	public Set<Father> getFathers() {
		return this.fathers;
	}

	@Id
	@Column(name = "id", unique = true, nullable = false)
	//@GeneratedValue(strategy = GenerationType.IDENTITY)
	//ECLIPSELINK
	@GeneratedValue(generator = "father", strategy = GenerationType.TABLE)
	@TableGenerator(name = "father", table = "keygen", pkColumnName = "table_name", valueColumnName = "last_used_id", initialValue = 0, allocationSize = 1)
	
	//HIBERNATE
	//@GeneratedValue(generator = "father")
	//@GenericGenerator(name = "father", strategy = "archetype.utils.orm.hibernate.id.IdentityGenerator")
	public Integer getId() {
		return this.id;
	}

	@Column(name = "name", nullable = false, length = 65535)
	public String getName() {
		return this.name;
	}

	@Version
	@Column(name = "version", nullable = false)
	public Integer getVersion() {
		return version;
	}

	@Column(name = "mother", nullable = false)
	public boolean isMother() {
		return this.mother;
	}

	@Transient
	public void postset(IUnmarshallingContext ctx) {
		logger.trace("postset!");
	}

	@Transient
	public void postset(Object obj) {
		logger.trace("postset!");
	}

	@Transient
	public void preget(Object obj) {
		logger.trace("preget!");
	}

	@Transient
	public void preset(Object obj) {
		logger.trace("preset!");
	}

	public void setAudit(Audit audit) {
		this.audit = audit;
	}

	public void setChildren(Children children) {
		this.children = children;
	}

	public void setChildrens(List<Children> childrens) {
		this.childrens = childrens;
	}

	public void setFather(Father father) {
		this.father = father;
	}

	public void setFathers(Set<Father> fathers) {
		this.fathers = fathers;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Transient
	public void setmethod(Object obj) {
		logger.trace("setmethod!");
	}

	public void setMother(boolean mother) {
		this.mother = mother;
	}

	public void setName(String name) {
		this.name = name;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}

}
